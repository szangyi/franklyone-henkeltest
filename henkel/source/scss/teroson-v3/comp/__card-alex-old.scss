// -----------------------------------------------------------------------------
// Card Component
//
// Markup examples:
// <div data-comp="card">
//     <picture data-comp="embed">
//          <img src="" />
//     </picture>
//     <div class="content">
//         <div class="text-container">
//              <h4></h4>
//              <p></p>
//         </div>
//         <a><button></button></a>
//     </div>
// </div>
//
// -----------------------------------------------------------------------------

@use "../base/config" as *;

@use "../frankly/comp";
@use '../frankly/theme';
@use '../frankly/font';



// -----------------------------------------------------------------------------
// Card Component
// -----------------------------------------------------------------------------

@mixin card {
    @include comp.create(card) {


        @at-root :where(&) {

            // default values 
            --font-size: var(--font-size-text-sm);
            --font-align: var(--font-align-center);

            --padding-default: 1.5em;

            @media (min-width: 60rem) {
                --padding-default: 2em;
            }
        }

        // assign variables - color variables added later
        font-size: var(--ðŸ”¤-font-size);
        text-align: var(--ðŸ”¤-font-align);
        
        .content {
            padding: var(--padding-default);
            display: flex !important;
            flex-direction: column;
            block-size: 100%;
        }

        // Default card is vertically organized
        // Image, Headline, Text, Button

        display: flex;
        flex-flow: column;
        inline-size: 100%;
        block-size: 100%;
        background-color: theme.color('white');
        color: theme.color('black');
        box-shadow: $box-shadow;
        overflow: hidden; // <= to cut off images (border-radius rounded)

        // --------------------------------------------------------------------
        // Font styling
        // --------------------------------------------------------------------

        @at-root :where(&) {
            // default values 

            .subheadline {
                --font-size: var(--font-size-text-md);
                --font-weight: var(--font-weight-extra-bold);
                --font-transform: var(--font-transform-uppercase);
                --color-text: var(--color-brand);

            }

            .headline {
                --font-size: var(--font-size-heading-4);
                --font-weight: var(--font-weight-bold);
                --color-text: var(--color-black);
            }
        }

        .subheadline {
            margin-bottom: 25px;
            color: var(--color-brand);
        }

        .headline {
            margin-bottom: 25px;
        }

        // --------------------------------------------------------------------
        // Button styling
        // --------------------------------------------------------------------

        a {
            padding-top: 25px;
            width: fit-content;
            margin-top: auto;
        }

        // --------------------------------------------------------------------
        // Content styling
        // --------------------------------------------------------------------

        [data-comp="embed"] {
            block-size: fit-content;

            >* {
                aspect-ratio: 16/9;
            }
        }

        [data-comp="embed icon"] {
            block-size: 100px;
            inline-size: auto;
            padding: var(--padding-default);
            padding-bottom: 0;
            // align-self: flex-start; // just removed bc of the data-flex

            svg {
                // inline-size: initial;
            }
        }



        &.no-click {
            pointer-events: none !important;
        }

        // --------------------------------------------------------------------
        // Media-queries
        // --------------------------------------------------------------------

        @media (min-width: 40rem) {
            [data-comp="embed"] {
                >* {
                    aspect-ratio: 1/1;
                }
            }
        }
    }





    // Assemble
    @include card-rounded;
    @include card-horizontal;
    @include card-swipe;
    @include card-flip;
    // @include card-quiz;
    @include card-split;

    @include card-left;
    @include card-right;
    @include card-center;

    @include card-container;
}

@mixin card-rounded {

    // <= create component variation
    @include comp.create('card', 'rounded') {
        _container: card-rounded / inline-size; // <= not using yet
        border-radius: 15px;
    }
}

@mixin card-horizontal {

    // <= should be refactored to data-layout flex-row
    @include comp.create('card', 'horizontal') {
        // <= create component variation

        _container: card-horizontal / inline-size; // <= not using yet
        flex-flow: row;

        [data-comp="embed"] {
            block-size: unset;
        }

        [data-comp="embed icon"] {
            align-self: center;
            // max-width: 130px;
            padding: var(--padding-default);
            padding-right: 0;

            inline-size: 130px;
            block-size: auto;
        }

        [data-comp="embed"] {
            inline-size: 80%;
        }

        [data-comp*="embed wallpaper"] {
            z-index: unset;
        }

        .content {
            inline-size: 100%;

            .text-container {
                display: flex;
                flex-flow: column;
                justify-content: center;
                block-size: 100%;
            }
        }

        @media (min-width: 40rem) {
            [data-comp="embed"] {
                inline-size: 50%;

                >* {
                    aspect-ratio: 16/9;
                }
            }
        }

    }
}

@mixin card-split {

    // <= should be removed and merged
    @include comp.create('card', 'split') {

        display: grid;
        grid-template-rows: repeat(var(--num-images), 1fr);
        padding: 0;

        .content {
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        [data-comp*="embed icon"] {
            inline-size: 100%;
            block-size: 30px;
            padding: 0;

            svg {
                margin: 5px auto;
            }
        }

    }
}

@mixin card-swipe {
    @include comp.create('card', 'swipe') {

        // Transition

        transition: transform;
        will-change: transform;
        transform: scale(var(--scale, 1)) translate(var(--tx, 0), var(--ty, 0)) rotate(var(--rotate, 0)) rotateY(var(--rotatey, 0));
        transition: transform var(--transition, 1s);

        // Interactivity

        touch-action: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;

        [data-comp*="embed"] {
            block-size: fit-content; // should only work when it's not cover

            >* {
                aspect-ratio: 1.78/1;
            }
        }

        [data-comp="embed"] {
            block-size: 60%;
        }

        [data-comp="embed wallpaper"] {
            block-size: 100%;
        }


        .front {

        [data-comp*="button"] {
            --margin-default: .3rem;
        }
        }



    }

}

@mixin card-flip {
    @include comp.create('card', 'flip') {

        perspective: 2000px;
        background: none;
        z-index: var(--z, 0);
        transition: transform 600ms;


        cursor: pointer;

        // State 

        // &:hover {           // <= move out as hover variation
        //     _transform: translateY(-5px);
        // }

        &.discarded {
            transform: translate(120vw, 4%) rotate(15deg);
        }

        .inner,
        .front,
        .back {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .front,
        .back {
            overflow-y: auto; // make it scrollable when text is too much
        }

        .inner {
            box-shadow: 0.5rem 0.5rem 2rem rgb(40 40 40 / 20%);
            transform-style: preserve-3d;
            transition: transform 1s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        &:not(.flipped) .back {
            display: none;
        }

        &:not(.flipped) .inner {
            overflow: auto;
        }

        .front,
        .back {
            height: initial;
            min-height: 100%;
        }

        &.flipped .inner {
            transform: rotateY(180deg);
        }

        .front,
        .back {
            background-color: white;
        }

        .front,
        .back,
        .front>div,
        .back>div {
            transform-style: preserve-3d;
            backface-visibility: hidden;

            display: flex;
            flex-direction: column;
            justify-content: center; // fix this so when it's flowing out should be not here
            align-items: center;
        }

        .back {
            transform: rotateY(180deg);
            pointer-events: none;
        }

        &.flipped .back {
            pointer-events: auto !important;
        }


    }
}

@mixin card-quiz {
    @include comp.create('card', 'quiz') {  // <= do I need this? 

        cursor: default;

        /* ------- */
        /* Regular */
        /* ------- */

        [data-quiz*="regular"] {

            .front,
            .back {
                overflow-y: auto;
                overflow-x: hidden;
                transform-style: preserve-3d;
                backface-visibility: hidden;
            }

            .back {
                transform: rotateY(180deg);
                pointer-events: none;
            }

            &.discarded {
                transform: translate(120vw, 4%) rotate(15deg);
            }
        }

        &.swipe-answer {
            opacity: 1;
            transition: 0.4s;
            /* overflow: hidden; */
            padding: 2em;
            transform-origin: center;
            transform: scale(1);

            .inner {
                overflow: hidden;
                background-color: white;
                color: white;
                display: flex;
                flex-direction: column;
                justify-content: center;
                /* to hide the text on the stacking cards */
            }

            &.discarded {
                transform: scale(0);
                opacity: 0;
            }
        }

        // fieldset {
        //     opacity: 0;
        // }
    }
}


// Card alignment                                   //  <= should be refactored with data-layout align

@mixin card-left {
    @include comp.create('card', 'left') {
        // <= create component variation

        // Default

        text-align: left;
        align-items: flex-start;

        * {
            align-self: flex-start;
        }
    }
}

@mixin card-right {
    @include comp.create('card', 'right') {
        // <= create component variation
        text-align: right;
        align-items: flex-end;

        * {
            align-self: flex-end;
        }
    }
}

@mixin card-center {
    @include comp.create('card', 'center') {
        // <= create component variation
        text-align: center;
        align-items: center;

        * {
            align-self: center;
        }
    }
}

// -----------------------------------------------------------------------------
// Card Containers
// -----------------------------------------------------------------------------

@mixin card-container {
    @include comp.create('card-container') {
        display: grid;
        grid-gap: 1rem;
        width: 100%;
        height: 100%;






        // From card-container swipe
        .end {
            display: flex;
            align-items: center;
            background: transparent;
            box-shadow: none;
            transform: translateY(1%);
            opacity: -5;

            &.reveal {
                img {
                    cursor: pointer;
                    block-size: 90%;
                }
            }
        }

        .hidden {
            opacity: 0;
        }

        .reveal {
            opacity: 100;
            transform: translateY(0);
            transition: all .5s ease-in;
        }
    }

    @include comp.create('card-container', 'grid') {
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        grid-auto-rows: minmax(200px, auto);
    }

    @include comp.create('card-container', 'stack') {

        [data-comp*="card"] {
            grid-area: 1/1;
            z-index: var(--z, 0); // To stack the cards
        }

        [data-comp*="card"]:not(.discarded)+[data-comp*="card"] {
            transform: translateY(4%) scale(0.96);
        }

        [data-comp*="card"]:not(.discarded)+[data-comp*="card"]+[data-comp*="card"] {
            transform: translateY(8%) scale(0.92);
        }

    }

    @include comp.create('card-container', 'stack-rotate') {

        [data-comp*="card "] {
            block-size: 100%;
            --tx: calc(var(--swipe-pct) * 200%); // To rotate the cards
            --rotate: calc(var(--swipe-pct) * 0.2turn); // To rotate the cards
        }

        .card-box {
            transform: rotate(var(--rotate, 0));
            z-index: var(--z, 0);
            // display: flex;
            // justify-content: center;
            // block-size: 100%;
            // inline-size: 100%;
            grid-area: 1/1;


            &:nth-of-type(2),
            &:nth-of-type(5),
            &:nth-of-type(8) {
                --rotate: 1.38eg;
            }

            &:nth-of-type(3),
            &:nth-of-type(6),
            &:nth-of-type(9) {
                --rotate: -1deg;
            }

            &:nth-of-type(4),
            &:nth-of-type(7),
            &:nth-of-type(10) {
                --rotate: 0;
            }

            &:nth-of-type(5),
            &:nth-of-type(8),
            &:nth-of-type(11) {
                --rotate: 2deg;
            }
        }

    }

    @include comp.create('card-container', 'quiz') {

        [data-correct="true"] [data-correct="false"],
        [data-correct="false"] [data-correct="true"] {
            display: none !important;
            pointer-events: none;
        }

        +.pagination {
            padding: 2em;
        }
    }

    .swipe-answer {
        overflow: visible;
    }

    .overlay {
        background: rgba(0, 0, 0, 0.9);
        width: 300vw;
        height: 300vh;
        margin-left: -100vw;
        margin-top: -100vh;
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        transition: 0.4s;
        opacity: 0;
        pointer-events: none;
    }

    [data-comp*="swipe"] {

        &.active,
        &.active+[data-comp="card"] {
            pointer-events: all !important;
        }


        --tx: calc(var(--swipe-pct) * 200%);
        --rotate: calc(var(--swipe-pct) * 0.2turn);
        transform: scale(var(--scale, 1)) translate(var(--tx, 0), var(--ty, 0)) rotate(var(--rotate, 0)) rotateY(var(--rotatey, 0));
        transition: transform var(--transition, 1s);

        overflow: hidden;
        touch-action: none; // include so it does not drag the whole screen on mobile
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;


        &.discarded+.swipe-answer .inner {
            background: transparent;
            _color: inherit;
        }


        &.discarded+.swipe-answer .overlay {
            opacity: 1;
        }

        .bubble {
            background-color: theme.color('brand');
            color: theme.color('white');
            border-radius: 50%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 1em;
            width: 4em;
            height: 4em;
            line-height: 2em;
            /* --opacity: calc(var(--swipe-pct) * 2); */
            opacity: var(--opacity, 0);

            z-index: 99;
        }

        /* ------ */
        /* Bubble */
        /* ------ */

        &[data-direction="left"] .bubble {
            background-color: black;
        }

        &[data-direction="left"] .bubble::before {
            content: "NO";
        }

        &[data-direction="right"] .bubble {
            background-color: theme.color('brand');
        }

        &[data-direction="right"] .bubble::before {
            content: "YES";
        }

        &:not(.discarded)+[data-comp*="card"] {
            transform: translateY(4%) scale(0.96);
        }

        &:not(.discarded)+[data-comp*="card"]+[data-comp*="card"] {
            transform: translateY(8%) scale(0.92);
        }

        /* ---------- */
        /* Animations */
        /* ---------- */

        // @media (max-width: 35rem) {

        //     .inner .front fieldset,
        //     .inner .front .front-inner {
        //         opacity: 0;



        //         &.appear {
        //             transition: 0.5s ease-in;
        //             opacity: 1;
        //         }
        //     }

        //     .disappear {
        //         transform: scale(0);
        //     }


        // }

        // @media (min-width: 35rem) {
        // 	.character-image-slidein {
        // 		transition: 0.2s ease-in;
        // 		opacity: 0;
        // 		pointer-events: none;
        // 	}

        // 	// temporary fix for quiz-card-swipe slidein image
        // 	.character-image-slidein.discarded {
        // 		transform: translate(-100px, 0px);
        // 	}


        // 	.slide-in {
        // 		opacity: 1;
        // 		transform: translate(220px, 0px);
        // 	}

        // 	.card.flipped .slide-in {
        // 		opacity: 0;
        // 	}
        // }

        @media (min-width: 55rem) {
            .noevent {
                pointer-events: none !important;
            }

            &.active button,
            &.discarded+[data-comp*="card"] button {
                pointer-events: all;
            }
        }

    }

    [data-comp*="card"] {

        /* if card is datacorrect true, the following swipeanswer should be hidden */
        &[data-correct="true"]+.swipe-answer div[data-correct="false"],
        &[data-correct="false"]+.swipe-answer div[data-correct="true"] {
            display: none;
            pointer-events: none;
        }

        & .front,
        & .back {
            overflow: hidden;
        }


        // Swipe answer

        &.swipe-answer {
            opacity: 1;
            transition: 0.4s;
            /* overflow: hidden; */
            padding: 2em;
            transform-origin: center;
            transform: scale(1);

            .inner {
                overflow: hidden;
                background-color: white;
                color: white;
                display: flex;
                flex-direction: column;
                justify-content: center;
                /* to hide the text on the stacking cards */
            }

            &.discarded {
                transform: scale(0);
                opacity: 0;
            }
        }
    }


}










// <div class="card-swipe-container">
//     <div class="card-swipe-box">
//         <div class="card card-swipe text-center" data-correct="left">
//             <div class="image-container">
//                 <img />
//             </div>
//             <div class="text-container">
//                 <h4></h4>
//                 <p></p>
//             </div>
//         </div>
//     </div>

//     <div class="card-swipe-box">
//         <div class="card card-swipe text-center" data-correct="left">
//             <div class="image-container">
//                 <img />
//             </div>
//             <div class="text-container">
//                 <h4></h4>
//                 <p></p>
//             </div>
//         </div>
//     </div>
// </div>




// @mixin card--rounded {
//     [data-comp~="rounded"]:is([data-comp="card"], [data-comp^="card "]) {
//         border-radius: 1rem;
//     }
// }